template <typename T>
notag(T)
__primitive final_lval {
	static final_lval<T> __empty() noexcept require(T : movable);
	
	final_lval<notag(T)> implicit_copy() const noexcept(T : noexcept_implicit_copyable<T>) require(notag(T) : movable and T : implicit_copyable<T>);
	
	T* address() const noexcept;
	T& dissolve() const noexcept;
	
	bool __is_live() const noexcept require(T : queryislive);
	void __set_dead() noexcept require(T : deadstateable);
	
	void __set_value(T value) noexcept require(T : movable);
	T __extract_value() noexcept require(T : movable);
	void __destroy_value() noexcept;
	
	void __move_to(void* ptr, size_t position) noexcept require(T : movable);
}
