// Printf has an 'int' return type, but since
// it's ignored just use 'void'.
import void printf(const ubyte * const str, ...) noexcept;

class TestClass2(int i){
	static Create = default;
	
	~ {
		printf(C"Destructor for TestClass2 with value %d.\n", @i);
	}
	
	int getValue() const {
		return @i;
	}
	
	void passTestClass2(TestClass2 value) {
		printf(C"Received testclass2 value %d.\n", value.getValue());
	}
	
	void doSomething() { }
	
	TestClass2 implicitCopy() {
		return @(@i);
	}
};

interface an_interface{
	int getValue() const;
	
	void doSomething();
	
	void passTestClass2(TestClass2 value);
}

template <typename T>
class ExampleTemplatedClass0(){
	static Create() {
		return @();
	}
}

template <typename T>
interface multipliable {
	T multiply(const T& value) const require(T : movable);
}

template <typename T: movable>
class PolyClass(T v) {
	static Create(T value) {
		printf(C"Create PolyClass.\n");
		return @(move value);
	}
	
	~ {
		printf(C"Destroying PolyClass.\n");
	}
	
	T function(T value) require (T : multipliable<T>) {
		printf(C"Multiply PolyClass.\n");
		return value * @v;
	}
};

interface value_giving_interface{
	int getValue();
}

int getValue(value_giving_interface& v){
	return v.getValue();
}

an_interface& getPtrAsInterfaceRef(TestClass2 * testClassPointer){
	return *testClassPointer;
}

void function(TestClass2 * object){
	const TestClass2& testClassRef = *object;
	unused const TestClass2& testClassRef2 = testClassRef;
	printf(C"Value from fn: %d\n", testClassRef.getValue());
}

interface is_zero_interface {
	bool isZero() const;
}

bool isZero(const is_zero_interface& v){
	return v.isZero();
}

class custom_lval(int i) {
	static Create() {
		return @(0);
	}
	
	custom_lval implicitCopy() {
		return @(@i);
	}
	
	int* address() {
		return &@i;
	}

	void assign(int value) {
		@i = value;
	}
	
	int& dissolve() {
		return @i;
	}
	
	int move() {
		int tmp = @i;
		@i = 0;
		return tmp;
	}
}

void lvalFunc(lval<int> custom_lval& custLval) {
	printf(C"Custom lval: %d\n", move custLval);
}

template <typename T: movable>
interface count_type {
	T implicitCopy() const;
	
	T add(const T& value) const;
	
	compare_result_t compare(const T& other) const;
}

template <typename T>
require(T : count_type<T> and T : movable)
class count(T unit, T from, T to) {
	static Create = default;
	
	T front() {
		return @from;
	}
	
	void skipFront() {
		@from += @unit;
	}
	
	bool empty() {
		return @from >= @to;
	}
};

void goGet(an_interface& interfaceRef, TestClass2 val) {
	interfaceRef.passTestClass2(move val);
	printf(C"Done goGet.\n");
}

datatype Something(int a, int b);

void datatypeDemo() {
	auto i = Something(41, 42);
	printf(C"Something(%d, %d)\n", i.a, i.b);
	const Something(int a, _) = move i;
	printf(C"a = %d\n", a);
}

// datatype Tree = Node(Tree* left, Tree* right) | Leaf(int value);

import void* malloc(size_t size) noexcept;
import void free(void* ptr) noexcept;

template <typename T>
interface Copyable {
	T implicitCopy() const require(T : movable);
}

template <typename T : movable>
class Memory(T* ptr, size_t size, T emptyValue, T guardSlot) {
	static Create(size_t size, T emptyValue) require(T : Copyable<T>) {
		final auto sizeof_int = 4u;
		auto inst = @(reinterpret_cast<void*, T*>(malloc(size * sizeof_int)), size, emptyValue, emptyValue);
		
		for (auto i: count<size_t>(1u, 0u, inst.size())) {
			inst[i] = emptyValue;
		}
		
		return move inst;
	}
	
	~ {
		free(reinterpret_cast<T*, void*>(@ptr));
	}
	
	lval<T> ptr_lval<T> index(size_t i) require(T : Copyable<T>) {
		if (i < @size) {
			return @ptr[i];
		}
		printf(C"Out of bounds at index '%llu'.\n", i.cast<ulonglong_t>());
		@guardSlot = @emptyValue;
		return *(&(@guardSlot));
	}
	
	size_t size() const {
		return @size;
	}
	
}

Memory<int> createMemory() {
	auto m = Memory<int>(20u, -1000);
	for (auto i: count<int>(1, -5, 25)) {
		m[i.cast<size_t>()] = i + 42;
	}
	return move m;
}

export int main(int argc, ubyte ** argv){
	if(argc < 2){
		printf(C"Give me at least one argument...\n");
		return 1;
	}
	
	datatypeDemo();
	
	{
		auto m = createMemory();
		for (auto i: count<int>(1, -5, 25)) {
			printf(C"m[%02d] = %d.\n", i, m[i.cast<size_t>()]);
		}
	}
	
	ubyte * programName = argv[0u];
	printf(C"Program name is %s.\n", programName);
	
	int argIndex = 1;
	while (argIndex < argc) {
		printf(C"    Arg %d: %s\n", argIndex, argv[argIndex.cast<size_t>()]);
		argIndex += 1;
	}
	
	lval<int> custom_lval custLval = lval<int>(custom_lval());
	custLval = 101;
	lvalFunc(custLval);
	
	unused TestClass nullThing = null;
	
	unused auto templatedInstance = ExampleTemplatedClass0<int>();
	
	auto polyInst = PolyClass<int>(21);
	const int res000 = polyInst.function(8);
	printf(C"res000 = %d.\n", res000);
	
	auto polyInst2 = PolyClass<double>(4.0);
	const double res001 = polyInst2.function(16.0);
	printf(C"res001 = %f.\n", res001);
	
	auto polyInst3 = PolyClass<float>(4.0f);
	const float res002 = polyInst3.function(4.0f);
	printf(C"res002 = %f.\n", res002);
	
	{
		unused auto templatedInstancee = ExampleTemplatedClass0<int>();
	}
	
	auto firstTestClass = TestClass(1);
	unused auto firstTestClassMoved = move firstTestClass;
	
	{
		auto tmpValue = TestClass2(50).getValue();
		printf(C"TMPVALUE: %d\n", tmpValue);
		unused auto toDestroy = TestClass2(99);
	}
	
	auto testObject = TestClass2(argc * 2);
	
	//auto testObjectCopy = testObject;
	
	function(&testObject);
	
	printf(C"Value: %d\n", testObject.getValue());
	
	auto& interfaceRef = getPtrAsInterfaceRef(&testObject);
	printf(C"Got interface ref: %d.\n", interfaceRef.getValue());
	
	auto newTestClass2 = TestClass2(1024);
	goGet(interfaceRef, move newTestClass2);
	
	an_interface& interfaceObject = getPtrAsInterfaceRef(&testObject);
	printf(C"Interface (2) value: %d\n", getValue(interfaceObject));
	
	{
		final int potentially_zero_value = argc - 2;
		final bool isZ = isZero(potentially_zero_value);
		if(isZ){
			printf(C"Is zero!\n");
		}
	}
	
	{
		auto t = PolyClass<TestClass>(TestClass(0));
		unused auto t2 = t.function(TestClass(1));
		printf(C"PolyClass<TestClass>\n");
	}
	
	int i = 0;
	int * j = &i;
	while(i < argc){
		printf(C"i = %d\n", i);
		*j += 1;
	}
	
	if(i != (*j + 1)){
		printf(C"%d != %d\n", i, *j + 1);
	}
	
	float f = 3.141592653f;
	double d = 3.141592653;
	printf(C"Float f = %.10f, Double d = %.10f\n", f, d);
	
	int loopCount = 0;
	while(loopCount < 5) {
		loopCount += 1;
		f = f * f;
		d = d * d;
		printf(C"Float f = %.10f, Double d = %.10f\n", f, d);
	}
	
	printf(C"Hello world!\n");
	printf(C"This is Loci!\n");
	
	if (argc == 2) {
		printf(C"You gave me just 1 argument\n");
	} else {
		printf(C"You gave me %d arguments\n", argc - 1);
	}
	
	return 0;
}

