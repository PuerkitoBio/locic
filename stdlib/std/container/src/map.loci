
export std.container 0.1.0 {
	
	namespace std {
		
		template <typename T0, typename T1>
		move(T0 : movable and T1 : movable)
		datatype pair(T0 first, T1 second);
		
		template <typename Key, typename Value, bool IsMapConst>
		class map_range(varray_range<const<IsMapConst>(pair<Key, Value>), IsMapConst> range) {
			static create = default;
			
			implicit_copy = default;
			
			template <bool IsConst>
			lval<const<IsConst or IsMapConst>(pair<Key, Value>)> ptr_lval<const<IsConst or IsMapConst>(pair<Key, Value>)> front() const(IsConst) noexcept {
				return @range.front();
			}
			
			void skip_front() noexcept {
				@range.skip_front();
			}
			
			template <bool IsConst>
			lval<const<IsConst or IsMapConst>(pair<Key, Value>)> ptr_lval<const<IsConst or IsMapConst>(pair<Key, Value>)> back() const(IsConst) noexcept {
				return @range.back();
			}
			
			void skip_back() noexcept {
				@range.skip_back();
			}
			
			bool empty() const noexcept {
				return @range.empty();
			}
		}
		
		template <typename T>
		interface comparable {
			compare_result_t compare(const T& other) const noexcept;
		}
		
		template <typename T : movable>
		interface default_constructible {
			static T create();
		}
		
		/**
		 * \brief Map.
		 */
		template <typename Key, typename Value>
		// TODO: use a proper tree structure rather than an array!
		class map(std::varray<pair<Key, Value>> array) {
			static map<Key, Value> create() {
				return @(std::varray<pair<Key, Value>>());
			}
			
			bool empty() const noexcept {
				return @array.empty();
			}
			
			size_t size() const noexcept {
				return @array.size();
			}
			
			void clear() noexcept {
				@array.clear();
			}
			
			template <bool IsConst>
			lval<const<IsConst>(Value)> ptr_lval<const<IsConst>(Value)> index(const Key& key) const(IsConst) noexcept require(Key : comparable<Key>) {
				for (const size_t i: std::counter<size_t>(0u, @array.size(), 1u)) {
					if (@array[i].first == key) {
						return *(&(@array[i].second));
					}
				}
				unreachable;
			}
			
			void __sort() require(Key : comparable<Key> and Key : movable and Value : movable) {
				// Bubble sort! TODO: fix this!
				for (const size_t c: std::counter<size_t>(0u, @array.size(), 1u)) {
					for (const size_t i: std::counter<size_t>(1u, @array.size(), 1u)) {
						if (@array[i].first < @array[i - 1u].first) {
							auto tmp = nolval(@array[i]).__extract_value();
							nolval(@array[i]).__set_value(nolval(@array[i - 1u]).__extract_value());
							nolval(@array[i - 1u]).__set_value(move tmp);
						}
					}
				}
			}
			
			void insert(pair<Key, Value> value) require(Key : comparable<Key> and Key : movable and Value : movable) {
				for (const size_t i: std::counter<size_t>(0u, @array.size(), 1u)) {
					assert @array[i].first != value.first;
				}
				@array.push_back(move value);
				self.__sort();
			}
			
			bool try_insert(pair<Key, Value> value) require(Key : comparable<Key> and Key : movable and Value : movable) {
				for (const size_t i: std::counter<size_t>(0u, @array.size(), 1u)) {
					if (@array[i].first == value.first) {
						return false;
					}
				}
				@array.push_back(move value);
				self.__sort();
				return true;
			}
			
			Value& get_or_insert(const Key& key) require(Key : movable and Key : comparable<Key> and Key : copyable<Key> and Value : default_constructible<Value> and Value : movable) {
				for (const size_t i: std::counter<size_t>(0u, @array.size(), 1u)) {
					if (@array[i].first == key) {
						return @array[i].second;
					}
				}
				@array.push_back(pair<Key, Value>(key.copy(), Value()));
				self.__sort();
				return self[key];
			}
			
			void erase(const Key& key) require(Key : comparable<Key> and Key : movable and Value : movable) {
				auto array = std::varray<pair<Key, Value>>();
				for (const size_t i: std::counter<size_t>(0u, @array.size(), 1u)) {
					if (@array[i].first != key) {
						array.push_back(nolval(@array[i]).__extract_value());
					}
				}
				@array = move array;
			}
			
			template <bool IsConst>
			map_range<Key, Value, IsConst> all() const(IsConst) noexcept {
				return map_range<Key, Value, IsConst>(@array.all());
			}
		}
		
	}
	
}

