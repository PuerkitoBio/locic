export std.container 0.1.0 {

	namespace std {
		
		template <typename T>
		require (is_movable<T>)
		interface counter_type {
			T implicit_copy() const noexcept;
			
			compare_result_t compare(const T& value) const noexcept;
			
			T add(const T& value) const noexcept;
		}
		
		template <typename T>
		require(is_movable<T>)
		using is_countable = is_movable<T> and T : counter_type<T>;
		
		template <typename T>
		require (is_countable<T>)
		class counter (T begin, T end, T increment) {
			static create(T begin, T end, T increment) noexcept {
				assert begin <= end;
				return @(move begin, move end, move increment);
			}
			
			const T& front() const noexcept {
				return @begin;
			}
			
			void skip_front() noexcept {
				@begin += @increment;
			}
			
			bool empty() const noexcept {
				return @begin == @end;
			}
		}
		
		template <typename T>
		require (is_countable<T>)
		class counter_incl (T begin, T end, T increment, bool empty) {
			static create(T begin, T end, T increment) noexcept {
				assert begin <= end;
				return @(move begin, move end, move increment, false);
			}
			
			const T& front() const noexcept {
				return @begin;
			}
			
			void skip_front() noexcept {
				if (@begin == @end) {
					@empty = true;
					return;
				}
				@begin += @increment;
			}
			
			bool empty() const noexcept {
				return @empty;
			}
		}
		
		template <typename T>
		require (is_movable<T>)
		interface reverse_counter_type {
			T implicit_copy() const noexcept;
			
			compare_result_t compare(const T& value) const noexcept;
			
			T subtract(const T& value) const noexcept;
		}
		
		template <typename T>
		require(is_movable<T>)
		using is_reverse_countable = is_movable<T> and T : reverse_counter_type<T>;
		
		template <typename T>
		require (is_reverse_countable<T>)
		class reverse_counter (T begin, T end, T decrement, bool empty) {
			static create(T begin, T end, T decrement) noexcept {
				assert begin >= end;
				if (begin > end) {
					begin -= decrement;
					return @(move begin, move end, move decrement, false);
				} else {
					return @(move begin, move end, move decrement, true);
				}
			}
			
			const T& front() const noexcept {
				return @begin;
			}
			
			void skip_front() noexcept {
				if (@begin == @end) {
					@empty = true;
					return;
				}
				@begin -= @decrement;
			}
			
			bool empty() const noexcept {
				return @empty;
			}
		}
		
		template <typename T>
		require (is_reverse_countable<T>)
		class reverse_counter_incl (T begin, T end, T decrement, bool empty) {
			static create(T begin, T end, T decrement) noexcept {
				assert begin >= end;
				return @(move begin, move end, move decrement, false);
			}
			
			const T& front() const noexcept {
				return @begin;
			}
			
			void skip_front() noexcept {
				if (@begin == @end) {
					@empty = true;
					return;
				}
				@begin -= @decrement;
			}
			
			bool empty() const noexcept {
				return @empty;
			}
		}
		
	}
	
}
		
		
