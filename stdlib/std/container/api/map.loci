
import std.container 0.1.0 {
	
	namespace std {
		
		template <typename T0 : movable, typename T1 : movable>
		datatype pair(T0 first, T1 second);
		
		template <typename T>
		interface comparable {
			compare_result_t compare(const T& other) const noexcept;
		}
		
		template <typename T : movable>
		interface default_constructible {
			static T create();
		}
		
		/**
		 * \brief Map.
		 */
		template <typename Key: comparable<Key>, typename Value : movable>
		require(Key : movable)
		class map {
			static map<Key, Value> create();
			
			bool empty() const noexcept;
			
			size_t size() const noexcept;
			
			void clear() noexcept;
			
			template <bool IsConst>
			lval<const<IsConst>(Value)> ptr_lval<const<IsConst>(Value)> index(const Key& key) const(IsConst) noexcept;
			
			void insert(pair<Key, Value> value);
			
			bool try_insert(pair<Key, Value> value);
			
			Value& get_or_insert(const Key& key) require(Key : copyable<Key> and Value : default_constructible<Value>);
			
			template <bool IsConst>
			map_range<Key, Value, IsConst> all() const(IsConst) noexcept;
		}
		
		template <typename Key : movable, typename Value : movable, bool IsMapConst>
		class map_range {
			map_range<Key, Value, IsMapConst> implicitCopy() const noexcept;
			
			template <bool IsConst>
			lval<const<IsConst or IsMapConst>(pair<Key, Value>)> ptr_lval<const<IsConst or IsMapConst>(pair<Key, Value>)> front() const(IsConst);
			
			void skip_front();
			
			template <bool IsConst>
			lval<const<IsConst or IsMapConst>(pair<Key, Value>)> ptr_lval<const<IsConst or IsMapConst>(pair<Key, Value>)> back() const(IsConst);
			
			void skip_back();
			
			bool empty() const noexcept;
		}
		
	}
	
}

