import std.memory 0.1.0 {
	
	namespace std {
		
		template <typename T>
		class unique_ptr {
			static unique_ptr<T> create(T value) require(T : movable);
			
			static unique_ptr<T> null() noexcept;
			
			template <bool IsConst>
			lval<const<IsConst>(T)> ptr_lval<const<IsConst>(T)> deref() const(IsConst) noexcept;
			
			template <bool IsConst>
			const<IsConst>(T)* get() const(IsConst) noexcept;
			
			void reset(T* pointer) noexcept;
			
			T* release() noexcept;
			
			bool __islive() const noexcept;
		}
		
		template <typename T : movable>
		unique_ptr<T> new_unique(T value);
		
	}
	
}

