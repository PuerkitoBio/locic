export std.memory 0.1.0 {
	
	namespace std {
		
		template <typename T>
		require(is_movable<T>)
		T* new_raw(T value) {
			void* ptr = allocate(sizeof(T));
			T* castPtr = reinterpret_cast<void*, T*>(ptr);
			nolval(*castPtr).__set_value(move value);
			return castPtr;
		}
		
		template <typename T>
		void delete_raw(T* ptr) noexcept {
			nolval(*ptr).__destroy_value();
			release(reinterpret_cast<T*, void*>(ptr));
		}
		
	}
	
}

