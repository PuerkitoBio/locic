export std.memory 0.1.0 {
	
	namespace std {
		
		template <typename T>
		// TODO: use atomic counter.
		class shared_ptr(__override_const size_t* countField, T* ptr) {
			static create(T value) require(T : movable) {
				return @(new_raw<size_t>(1u), new_raw<T>(move value));
			}
			
			static from_ptr(T* ptr) {
				return @(new_raw<size_t>(1u), ptr);
			}
			
			static null() noexcept {
				return @(null, null);
			}
			
			static __dead() noexcept {
				return @(null, null);
			}
			
			~ {
				if (@countField == null) {
					return;
				}
				
				(*@countField) -= 1u;		
				if (*@countField == 0u) {
					delete_raw<size_t>(@countField);
					delete_raw<T>(@ptr);
				}
			}
			
			bool __islive() const noexcept {
				return @ptr != null;
			}
			
			template <bool IsConst>
			shared_ptr<const<IsConst>(T)> implicit_copy() const(IsConst) noexcept {
				(*@countField) += 1u;
				return @<const<IsConst>(T)>(@countField, @ptr);
			}
			
			template <bool IsConst>
			lval<const<IsConst>(T)> ptr_lval<const<IsConst>(T)> deref() const(IsConst) noexcept {
				return *@ptr;
			}
		}
		
		template <typename T : movable>
		shared_ptr<T> new_shared(T value) {
			return shared_ptr<T>::create(move value);
		}
		
	}
	
}

