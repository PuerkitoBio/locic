// Test output.
import void testPrint(const ubyte * str, ...) noexcept;

class CountObject(ubyte_t value) {
	static create = default;
	
	CountObject implicitCopy() const noexcept {
		return @(@value);
	}
	
	compare_result_t compare(const CountObject& other) const noexcept {
		testPrint(C"CountObject: compare %u and %u", @value, other.getValue());
		return @value.compare(other.getValue());
	}
	
	CountObject add(const CountObject& other) const noexcept {
		testPrint(C"CountObject: %u + %u", @value, other.getValue());
		return @(@value + other.getValue());
	}
	
	ubyte_t getValue() const noexcept {
		return @value;
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	testPrint(C"Counting from 250 to 255 in increments of 1.");
	{
		int position = 0;
		
		for (auto i: std::counter<CountObject>(CountObject(250u), CountObject(255u), CountObject(1u))) {
			testPrint(C"Value %d = %u.", position, i.getValue());
			position += 1;
		}
	}
	
	testPrint(C"Counting inclusively from 250 to 255 in increments of 1.");
	{
		int position = 0;
		
		for (auto i: std::counter_incl<CountObject>(CountObject(250u), CountObject(255u), CountObject(1u))) {
			testPrint(C"Value %d = %u.", position, i.getValue());
			position += 1;
		}
	}
	
	return 0;
}

