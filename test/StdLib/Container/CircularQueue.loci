// Test output.
import void testPrint(const ubyte * str, ...) noexcept;

void testIntCircularQueue() {
	testPrint(C"testIntCircularQueue");
	
	auto queue = std::circular_queue<int>(4u);
	
	assert queue.empty();
	assert !queue.full();
	assert queue.size() == 0u;
	
	queue.push_back(1);
	
	assert !queue.empty();
	assert !queue.full();
	assert queue.size() == 1u;
	
	testPrint(C"Queue values = {");
	for (const auto& value: queue.all()) {
		testPrint(C"  %d", value);
	}
	testPrint(C"}");
	
	queue.push_back(2);
	queue.push_back(3);
	queue.push_back(4);
	
	assert !queue.empty();
	assert queue.full();
	assert queue.size() == 4u;
	
	testPrint(C"Queue values = {");
	for (const auto& value: queue.all()) {
		testPrint(C"  %d", value);
	}
	testPrint(C"}");
	
	testPrint(C"queue[0u] = %d", queue[0u]);
	testPrint(C"queue[1u] = %d", queue[1u]);
	testPrint(C"queue[2u] = %d", queue[2u]);
	testPrint(C"queue[3u] = %d", queue[3u]);
	
	queue.pop_front();
	queue.pop_front();
	
	assert !queue.empty();
	assert !queue.full();
	assert queue.size() == 2u;
	
	testPrint(C"Queue values = {");
	for (const auto& value: queue.all()) {
		testPrint(C"  %d", value);
	}
	testPrint(C"}");
	
	queue.pop_front();
	queue.push_back(5);
	
	assert !queue.empty();
	assert !queue.full();
	assert queue.size() == 2u;
	
	testPrint(C"Queue values = {");
	for (const auto& value: queue.all()) {
		testPrint(C"  %d", value);
	}
	testPrint(C"}");
	
	queue.pop_front();
	queue.push_back(6);
	
	assert !queue.empty();
	assert !queue.full();
	assert queue.size() == 2u;
	
	testPrint(C"Queue values = {");
	for (const auto& value: queue.all()) {
		testPrint(C"  %d", value);
	}
	testPrint(C"}");
	
	queue.pop_front();
	queue.pop_front();
	
	assert queue.empty();
	assert !queue.full();
	assert queue.size() == 0u;
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	testIntCircularQueue();
	return 0;
}

