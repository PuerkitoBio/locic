// Test output.
import void testPrint(const ubyte * str, ...) noexcept;

void testFibonacciMessageQueue() {
	testPrint(C"testFibonacciMessageQueue");
	
	auto messageQueue = std::concurrency::message_queue<int>();
	
	int currentFibonacciNumber = 1;
	int nextFibonacciNumber = 2;
	
	while (true) {
		if (!messageQueue.empty()) {
			const int value = messageQueue.receive();
			testPrint(C"Received value: %d", value);
			
			if (value > 100) {
				break;
			}
		}
		
		testPrint(C"Sending value: %d", currentFibonacciNumber);
		messageQueue.send(currentFibonacciNumber);
		
		const int previousFibonacciNumber = currentFibonacciNumber;
		currentFibonacciNumber = nextFibonacciNumber;
		nextFibonacciNumber = previousFibonacciNumber + currentFibonacciNumber;
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	testFibonacciMessageQueue();
	return 0;
}

