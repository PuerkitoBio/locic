// Test output.
import void testPrint(const ubyte * const str, ...) noexcept;

class TestClass (int value) {
	static Create(int value) {
		testPrint(C"TestClass.Create: value = %d", value);
		return @(value);
	}
	
	~ {
		testPrint(C"TestClass.~: value = %d", @value);
	}
	
	TestClass implicitCopy() const {
		testPrint(C"TestClass.implicitCopy: value = %d", @value);
		return @(@value);
	}
	
	int value() {
		return @value;
	}
}

void function(TestClass& object) {
	testPrint(C"function: value = %d", object.value());
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	function(TestClass(100));
	
	function(TestClass(200));
	
	TestClass i = TestClass(300);
	function(i);
	
	TestClass j = TestClass(400);
	function(move j);
	
	return 0;
}

