// Test output.
import void testPrint(const ubyte * str, ...);

datatype TestDatatype(int a, int b, int c);

class TestClass (int a, int b, int c) {
	static Create = default;
	
	compare = default;
	
	void printValue() const {
		testPrint(C"testEntryPoint: object = TestClass(a = %d, b = %d, c = %d)", @a, @b, @c);
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	TestDatatype data = TestDatatype(1, 2, 3);
	
	testPrint(C"testEntryPoint: data = TestDatatype(a = %d, b = %d, c = %d)",
		data.a, data.b, data.c);
	
	testPrint(C"testEntryPoint: Compare with (1, 2, 3)");
	if (data == TestDatatype(1, 2, 3)) {
		testPrint(C"testEntryPoint: Is EQUAL.");
	} else {
		testPrint(C"testEntryPoint: Is NOT EQUAL.");
	}
	
	testPrint(C"testEntryPoint: Compare with (2, 2, 3)");
	if (data == TestDatatype(2, 2, 3)) {
		testPrint(C"testEntryPoint: Is EQUAL.");
	} else {
		testPrint(C"testEntryPoint: Is NOT EQUAL.");
	}
	
	testPrint(C"testEntryPoint: Compare with (3, 2, 1)");
	if (data == TestDatatype(3, 2, 1)) {
		testPrint(C"testEntryPoint: Is EQUAL.");
	} else {
		testPrint(C"testEntryPoint: Is NOT EQUAL.");
	}
	
	testPrint(C"testEntryPoint: Compare with (0, 0, 0)");
	if (data == TestDatatype(0, 0, 0)) {
		testPrint(C"testEntryPoint: Is EQUAL.");
	} else {
		testPrint(C"testEntryPoint: Is NOT EQUAL.");
	}
	
	TestClass object = TestClass(10, 20, 30);
	object.printValue();
	
	testPrint(C"testEntryPoint: Compare with (0, 0, 0)");
	if (object == TestClass(0, 0, 0)) {
		testPrint(C"testEntryPoint: Is EQUAL.");
	} else {
		testPrint(C"testEntryPoint: Is NOT EQUAL.");
	}
	
	testPrint(C"testEntryPoint: Compare with (10, 10, 10)");
	if (object == TestClass(10, 10, 10)) {
		testPrint(C"testEntryPoint: Is EQUAL.");
	} else {
		testPrint(C"testEntryPoint: Is NOT EQUAL.");
	}
	
	testPrint(C"testEntryPoint: Compare with (10, 20, 30)");
	if (object == TestClass(10, 20, 30)) {
		testPrint(C"testEntryPoint: Is EQUAL.");
	} else {
		testPrint(C"testEntryPoint: Is NOT EQUAL.");
	}
	
	testPrint(C"testEntryPoint: Compare with (20, 20, 30)");
	if (object == TestClass(20, 20, 30)) {
		testPrint(C"testEntryPoint: Is EQUAL.");
	} else {
		testPrint(C"testEntryPoint: Is NOT EQUAL.");
	}
	
	testPrint(C"testEntryPoint: Compare with (-10, -20, -30)");
	if (object == TestClass(-10, -20, -30)) {
		testPrint(C"testEntryPoint: Is EQUAL.");
	} else {
		testPrint(C"testEntryPoint: Is NOT EQUAL.");
	}
	
	return 0;
}

