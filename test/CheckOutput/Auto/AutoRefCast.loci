// Test output.
import void testPrint(const ubyte * const str, ...);

class TestClass (int value) {
	static Create(int value) {
		testPrint(C"TestClass.Create: Value = %d.", value);
		return @(value);
	}
	
	TestClass implicitCopy() const {
		int newValue = @value * 2;
		testPrint(C"TestClass.implicitCopy: Previous value = %d, New value = %d.", @value, newValue);
		return @(newValue);
	}
	
	int getValue() {
		testPrint(C"TestClass.getValue: Value = %d.", @value);
		return @value;
	}
}

TestClass& function(TestClass& object) {
	auto& refObject = object;
	
	testPrint(C"function: Ref value = %d.", refObject.getValue());
	
	auto copyObject = object;
	
	testPrint(C"function: Copy value = %d.", copyObject.getValue());
	
	return object;
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	auto inst = TestClass(44);
	
	testPrint(C"testEntryPoint: Value = %d.", inst.getValue());
	
	auto& inst2 = function(inst);
	
	testPrint(C"testEntryPoint: Value = %d.", inst2.getValue());
	
	return 0;
}

