// Test output.
import void testPrint(const ubyte * const str, ...) noexcept;

exception ExampleError1(int value1);
exception ExampleError2(int value1, int value2);
exception ExampleError3(int value1, int value2, int value3);
exception ExampleError4(int value1, int value2, int value3, int value4);

void throwFunction(int throwIndex) {
	try {
		if (throwIndex == 0) {
			testPrint(C"Not throwing.");
		}
		if (throwIndex == 1) {
			testPrint(C"Throwing first exception.");
			throw ExampleError1(1);
		}
		if (throwIndex == 2) {
			testPrint(C"Throwing second exception.");
			throw ExampleError2(2, 3);
		}
		if (throwIndex == 3) {
			testPrint(C"Throwing third exception.");
			throw ExampleError3(4, 5, 6);
		}
		if (throwIndex == 4) {
			testPrint(C"Throwing fourth exception.");
			throw ExampleError4(7, 8, 9, 10);
		}
	} catch (ExampleError1 error) {
		testPrint(C"Caught exception V1 with value %d!",
			error.value1);
	} catch (ExampleError2 error) {
		testPrint(C"Caught exception V2 with values %d and %d!",
			error.value1, error.value2);
	} catch (ExampleError3 error) {
		testPrint(C"Caught exception V3 with values %d, %d and %d!",
			error.value1, error.value2, error.value3);
	} catch (ExampleError4 error) {
		testPrint(C"Caught exception V4 with values %d, %d, %d and %d!",
			error.value1, error.value2, error.value3, error.value4);
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	throwFunction(0);
	throwFunction(1);
	throwFunction(2);
	throwFunction(3);
	throwFunction(4);
	return 0;
}

