// Test output.
import void testPrint(const ubyte * str, ...);

class TestClass(int value) {
	static create = default;
	
	int getValue() const {
		return @value;
	}
	
	void setValue(int value) {
		@value = value;
	}
	
	int* mutablePointer() {
		return &@value;
	}
	
	const int* constPointer() const {
		return &@value;
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	auto mutableInst = TestClass(40);
	
	testPrint(C"mutableInst value = %d", mutableInst.getValue());
	
	testPrint(C"mutableInst value (by pointer) = %d", *(mutableInst.mutablePointer()));
	
	testPrint(C"mutableInst value (by const pointer) = %d", *(mutableInst.constPointer()));
	
	mutableInst.setValue(60);
	
	testPrint(C"mutableInst value (by const pointer after first modification) = %d", *(mutableInst.constPointer()));
	
	*(mutableInst.mutablePointer()) = 70;
	
	testPrint(C"mutableInst value (by const pointer after second modification) = %d", *(mutableInst.constPointer()));
	
	const auto constInst = TestClass(50);
	
	testPrint(C"constInst value = %d", constInst.getValue());
	
	testPrint(C"constInst value (by const pointer) = %d", *(constInst.constPointer()));
	
	return 0;
}

