// Test output.
import void testPrint(const ubyte * const str, ...);

// First interface implementation.
class TestClass1 (int value) {
	static Create(int value) {
		testPrint(C"TestClass1.Create: Value = %d", value);
		return @(value);
	}
	
	int getValue() {
		testPrint(C"TestClass1.getValue: Value = %d", @value);
		return @value;
	}
	
}

// Second interface implementation.
class TestClass2 (int value) {
	static Create(int value) {
		testPrint(C"TestClass2.Create: Value = %d", value);
		return @(value);
	}
	
	int getValue() {
		testPrint(C"TestClass2.getValue: Value = %d", @value);
		return @value;
	}
	
}

// Interface definition.
interface TestInterface {
	int getValue();
}

void polymorphicPrint(TestInterface& object) {
	int value = object.getValue();
	testPrint(C"polymorphicPrint: Value = %d", value);
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	auto testInstance1 = TestClass1(100);
	
	polymorphicPrint(testInstance1);
	
	auto testInstance2 = TestClass2(200);
	
	polymorphicPrint(testInstance2);
	
	return 0;
}

