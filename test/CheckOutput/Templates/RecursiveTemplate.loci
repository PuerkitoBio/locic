// Test output.
import void testPrint(const ubyte * str, ...);

interface Printable {
	void print();
}

interface Incrementable {
	void addOne();
	
	void reset();
	
	void print();
}

interface Counter {
	void addOne();
	
	void subtractOne();
	
	void reset();
	
	void print();
}

class TestClass(int value) {
	static Create(int value) {
		return @(move value);
	}
	
	void addOne() {
		@value += 1;
	}
	
	void subtractOne() {
		@value -= 1;
	}
	
	void reset() {
		@value = 0;
	}
	
	void print() {
		testPrint(C"            TestClass.printValue: value = %d", @value);
	}
}

template <typename T: Printable>
class InnerClass(T& valueRef) {
	static Create(T& value) {
		return @(value);
	}
	
	void print() {
		testPrint(C"        InnerClass.printValue");
		@valueRef.print();
	}
}

template <typename T: Incrementable>
class MiddleClass(T& valueRef, InnerClass<T> value) {
	static Create(T& value) {
		return @(value, InnerClass<T>(value));
	}
	
	void print() {
		testPrint(C"    MiddleClass.printValue");
		@value.print();
		
		@valueRef.addOne();
		@value.print();
		
		@valueRef.reset();
		@value.print();
		
		@valueRef.addOne();
		@value.print();
		
		@valueRef.addOne();
		@value.print();
	}
}

template <typename T: Counter>
class OuterClass(T& valueRef, MiddleClass<T> value) {
	static Create(T& value) {
		return @(value, MiddleClass<T>(value));
	}
	
	void print() {
		testPrint(C"OuterClass.printValue");
		@value.print();
		
		@valueRef.addOne();
		@value.print();
		
		@valueRef.subtractOne();
		@value.print();
		
		@valueRef.reset();
		@value.print();
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	TestClass testObject = TestClass(1900);
	OuterClass<TestClass> object = OuterClass<TestClass>(testObject);
	object.print();
	
	return 0;
}

