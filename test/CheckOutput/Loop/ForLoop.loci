// Test output.
import void testPrint(const ubyte * str, ...);

class test_range(int value, int position, int limit) {
	static Create(int limit) {
		return @(1, 0, limit);
	}
	
	int front() {
		testPrint(C"test_range: front");
		return @value;
	}
	
	void skipFront() {
		testPrint(C"test_range: skipFront");
		@position += 1;
		@value *= 2;
	}
	
	bool empty() {
		testPrint(C"test_range: empty");
		return @position > @limit;
	}
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	
	for (auto value: test_range(8)) {
		testPrint(C"testEntryPoint(up to 2^8): value = %d", value);
	}
	
	for (auto value: test_range(16)) {
		testPrint(C"testEntryPoint(up to 2^16): value = %d", value);
	}
	
	return 0;
}

