// Test output.
import void testPrint(const ubyte * const str, ...);

// Class definition.
class TestClass(int value) {
	static Create(int value) {
		testPrint(C"TestClass.Create: Value = %d", value);
		return @(value);
	}
	
	TestClass implicitCopy() const {
		int newValue = @value + 1;
		testPrint(C"TestClass.implicitCopy: Value = %d", newValue);
		return @(newValue);
	}
	
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	TestClass testInstance1 = TestClass(1);
	TestClass testInstance2 = testInstance1;
	TestClass testInstance3 = testInstance2;
	TestClass testInstance4 = testInstance3;
	unused TestClass testInstance5 = testInstance4;
	
	return 0;
}

