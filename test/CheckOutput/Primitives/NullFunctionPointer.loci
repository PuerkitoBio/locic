// Test output.
import void testPrint(const ubyte * str, ...) noexcept;

void functionToBeCalled0() {
	testPrint(C"functionToBeCalled0");
}

void callFunction0((*)(void)() function) {
	testPrint(C"callFunction0");
	
	if (function == null) {
		testPrint(C"function = null!");
		return;
	}
	
	function();
}

void functionToBeCalled1(int value0) {
	testPrint(C"functionToBeCalled1");
	testPrint(C"value0 = %d", value0);
}

void callFunction1((*)(void)(int) function, int value0) {
	testPrint(C"callFunction1");
	
	if (function == null) {
		testPrint(C"function = null!");
		return;
	}
	
	function(value0);
}

void functionToBeCalled2(int value0, int value1) {
	testPrint(C"functionToBeCalled2");
	testPrint(C"value0 = %d", value0);
	testPrint(C"value1 = %d", value1);
}

void callFunction2((*)(void)(int, int) function, int value0, int value1) {
	testPrint(C"callFunction2");
	
	if (function == null) {
		testPrint(C"function = null!");
		return;
	}
	
	function(value0, value1);
}

void functionToBeCalled3(int value0, int value1, int value2) {
	testPrint(C"functionToBeCalled3");
	testPrint(C"value0 = %d", value0);
	testPrint(C"value1 = %d", value1);
	testPrint(C"value2 = %d", value2);
}

void callFunction3((*)(void)(int, int, int) function, int value0, int value1, int value2) {
	testPrint(C"callFunction3");
	
	if (function == null) {
		testPrint(C"function = null!");
		return;
	}
	
	function(value0, value1, value2);
}

// Entry point.
export int testEntryPoint(unused int argc, unused ubyte ** argv) {
	{
		callFunction0(null);
		callFunction0(functionToBeCalled0);
	}
	{
		callFunction1(null, 1);
		callFunction1(functionToBeCalled1, 2);
	}
	{
		callFunction2(null, 1, 3);
		callFunction2(functionToBeCalled2, 2, 4);
	}
	{
		callFunction3(null, 1, 3, 5);
		callFunction3(functionToBeCalled3, 2, 4, 6);
	}
	return 0;
}

