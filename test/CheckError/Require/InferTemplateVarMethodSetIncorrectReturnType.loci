
interface Requirements {
	int methodA();
}

template <typename T>
class TestClass() {
	void methodA() require(T : Requirements) { }
}

// The intention here is to confuse the compiler into
// assuming T has method 'methodA', even though the
// predicate 'TestClass<T> : Requirements' is actually
// always false and hence no information can be obtained
// from it about what methods T supports.
template <typename T>
int function(T& object) require(TestClass<T> : Requirements) {
	return object.methodA();
}
