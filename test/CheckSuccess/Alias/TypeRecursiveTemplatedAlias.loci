template <typename T : movable>
class TestClass() { }

template <typename T : movable>
using TestClassAlias0 = TestClass<T>;

template <typename T : movable>
using TestClassAlias1 = TestClassAlias0<T>;

template <typename T : movable>
using TestClassAlias2 = TestClassAlias1<T>;

template <typename T : movable>
using TestClassAlias3 = TestClassAlias2<T>;

template <typename T : movable>
using TestClassAlias = TestClassAlias3<T>;

template <typename T : movable>
export TestClass<T>* pointerCastFromAlias(TestClassAlias<T>* value) {
	return value;
}

template <typename T : movable>
export TestClassAlias<T>* pointerCastToAlias(TestClass<T>* value) {
	return value;
}

template <typename T : movable>
export TestClass<T>& refCastFromAlias(TestClassAlias<T>& value) {
	return value;
}

template <typename T : movable>
export TestClassAlias<T>& refCastToAlias(TestClass<T>& value) {
	return value;
}

template <typename T : movable>
export TestClass<T> moveFromAlias(TestClassAlias<T> value) {
	return move value;
}

template <typename T : movable>
export TestClassAlias<T> moveToAlias(TestClass<T> value) {
	return move value;
}

template <typename T>
datatype TemplatedClass(T value);

template <typename T : movable>
export TemplatedClass<TestClass<T>> moveFromTemplatedAlias(TemplatedClass<TestClassAlias<T>> value) {
	return move value;
}

template <typename T : movable>
export TemplatedClass<TestClassAlias<T>> moveToTemplatedAlias(TemplatedClass<TestClass<T>> value) {
	return move value;
}
