template <typename T>
require(notag(T) : movable and T : implicit_copyable<T>)
class CheckIsCopyable() { }

import CheckIsCopyable<member_lval<int>> checkMutableMemberLvalIsCopyable();
import CheckIsCopyable<member_lval<const int>> checkInnerConstMemberLvalIsCopyable();
import CheckIsCopyable<const member_lval<int>> checkOuterConstMemberLvalIsCopyable();
import CheckIsCopyable<const member_lval<const int>> checkBothConstMemberLvalIsCopyable();
import CheckIsCopyable<const member_lval<member_lval<int>>> checkDoubleNestedConstMemberLvalIsCopyable();
import CheckIsCopyable<const member_lval<member_lval<member_lval<int>>>> checkTripleNestedConstMemberLvalIsCopyable();
